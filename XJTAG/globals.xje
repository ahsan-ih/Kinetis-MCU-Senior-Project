// This file was automatically generated by XJDeveloper and contains some standard constants

// Global debug flag
INT DEBUG := FALSE;

// Standard return code from tests to indicate pass
CONST INT RESULT_PASS := 0;

// Standard return code from tests to indicate failure
CONST INT RESULT_FAIL := 1;

// Connection test reporting level
CONST INT CONNTEST_DEBUG_ALL      := 0;
CONST INT CONNTEST_DEBUG_DETAILED := 1;
CONST INT CONNTEST_DEBUG_NORMAL   := 2;
CONST INT CONNTEST_DEBUG_BRIEF    := 3;
CONST INT CONNTEST_DEBUG_NONE     := 4;

// MESSAGE_BOX icons
CONST INT MB_ICON_NONE        := 0;
CONST INT MB_ICON_ERROR       := 1;
CONST INT MB_ICON_QUESTION    := 2;
CONST INT MB_ICON_WARNING     := 3;
CONST INT MB_ICON_INFORMATION := 4;

// MESSAGE_BOX button selections
CONST INT MB_BUTTONS_OK                 := 0;
CONST INT MB_BUTTONS_OK_CANCEL          := 1;
CONST INT MB_BUTTONS_ABORT_RETRY_IGNORE := 2;
CONST INT MB_BUTTONS_YES_NO_CANCEL      := 3;
CONST INT MB_BUTTONS_YES_NO             := 4;
CONST INT MB_BUTTONS_RETRY_CANCEL       := 5;

// MESSAGE_BOX button return values
CONST INT MB_BUTTON_OK     := 1;
CONST INT MB_BUTTON_CANCEL := 2;
CONST INT MB_BUTTON_ABORT  := 3;
CONST INT MB_BUTTON_RETRY  := 4;
CONST INT MB_BUTTON_IGNORE := 5;
CONST INT MB_BUTTON_YES    := 6;
CONST INT MB_BUTTON_NO     := 7;

// Values to indicate function termination reason for post testing functions
CONST INT FUNCTIONTERMINATION_RETURNED             := 0x0;
CONST INT FUNCTIONTERMINATION_BROKEN_CHAIN         := 0x1;
CONST INT FUNCTIONTERMINATION_XJEASE_RUNTIME_ERROR := 0x2;
CONST INT FUNCTIONTERMINATION_OTHER_RUNTIME_ERROR  := 0x9;
CONST INT FUNCTIONTERMINATION_EXIT                 := 0x10;
CONST INT FUNCTIONTERMINATION_ABORTED              := 0x11;

// Standard formatting to be used with PRINT_FORMAT
CONST STRING ERROR_STYLE   := "colour=red";
CONST STRING WARNING_STYLE := "colour=darkorange";
CONST STRING DEBUG_STYLE   := "colour=darkgrey";

/// Check the JTAG chain is complete and contains the number of devices expected.
/// Prompts the operator to retry or exit if a problem is detected.
///
/// @param result Returns RESULT_PASS on success
/// @testfunction defaultenabled @groupname Check Chain
///
GLOBAL CheckChain()(INT result)
  // Specify if the option to retry should be provided
  CONST INT RETRY_ON_ERROR := TRUE;

  INT key;
  INT deviceCount;

  PRINT("Checking the integrity of the JTAG chain.\n");

  DO
    CHECKCHAIN()(deviceCount);

    IF DEBUG THEN
      PRINT_FORMAT(DEBUG_STYLE, "Device Count := ", deviceCount, "\nChain Devices := ", CHAIN_DEVICES, "\n");
    END;
  WHILE deviceCount != CHAIN_DEVICES
    // Exit immediately if not providing the option to retry
    IF !RETRY_ON_ERROR THEN
      PRINT_FORMAT(ERROR_STYLE, CIRCUIT_NAME, " was not correctly detected.\n\n");
      EXIT(RESULT_FAIL);
    END;

    // Flush key buffer
    DO WHILE GETKEY() END;

    PRINT_FORMAT(WARNING_STYLE, CIRCUIT_NAME, " was not correctly detected.\n");
    PRINT_FORMAT(WARNING_STYLE, "Press space bar to try again, or Q to quit.\n\n");

    DO
      key := WAITKEY();
    UNTIL (key = ' ') || (key = 'q') || (key = 'Q')
    END;

    IF key != ' ' THEN
      EXIT(RESULT_FAIL);
    END;
  END;

  result := RESULT_PASS;
END;

